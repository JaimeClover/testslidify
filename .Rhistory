} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x)
print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
?zeros
?zeroes
rep(0, ncol(df))
function perceptron(x, y, threshold = 0.99) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
coefs <- sapply(x, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x)){
if (sum(coefs * x[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x)
print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
perceptron <- function(x, y, threshold = 0.99) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
coefs <- sapply(x, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x)){
if (sum(coefs * x[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x)
print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
perceptron(df, label)
df <- data.frame(x=x, y=y)
plot(df, col=label)
label
label = c(TRUE, FALSE, FALSE, TRUE, TRUE)
plot(df, col=label)
plot(df$x, df$y, col=label)
df$x
df$y
library(ggplot2)
ggplot(df, aes(x=x, y=y)) + geom_point(aes(color = label))
label = c(TRUE, TRUE, FALSE, FALSE, FALSE)
ggplot(df, aes(x=x, y=y)) + geom_point(aes(color = label))
perceptron(df, label)
df$intercept <- 1
df
df <- data.frame(x, y)
df
df2 <- df
df2$intercept <- 1
df
df2
perceptron <- function(x, y, threshold = 0.99) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
x2$intercept <- 1
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
perceptron(df)
perceptron(df, label)
perceptron <- function(x, y, threshold = 0.99) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
x2$intercept <- 1
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
perceptron(df, label)
label[3] <- TRUE
label[2] <- FALSE
ggplot(df, aes(x=x, y=y)) + geom_point(aes(color = label))
perceptron(df, label)
-2 * df$x -3*df$y + 12 > 0
p <- perceptron(df, label)
p$coefs
p$coefs$x
divider <- data.frame(slope = - p$coefs$x / p$coefs$y, intercept = - p$coefs$intercept / p$coefs$y)
divider
plot(df$x, df$y, label)
plot(df$x, df$y, col = label)
g <- ggplot(df, aes(x, y, color = label))
?geom_line
g + geom_point() + geom_abline(slope = divider$slope, intercept=divider$intercept)
x <- rnorm(100)
y <- rnorm(100)
label <- 8 * x - 4 * y - 3 > 0
sum(label)
df2 <- data.frame(x, y, label)
g2 <- ggplot(df2, aes(x, y, color=label))
g2 + geom_point()
perceptron <- function(x, y, threshold = 0.99, verbose = FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
x2$intercept <- 1
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
df2 <- data.frame(x, y)
perceptron(df2, label)
p2 <- perceptron(df2, label)
p2$coefs
- p2$coefs / - p2$coefs$y
- p2$coefs / p2$coefs$y
plotcoefs <- - p2$coefs / p2$coefs$y
g2 + geom_point() + geom_abline(slope=plotcoefs$x, intercept = plotcoefs$intercept)
expand.grid(names(df2), 2)
expand.grid(rep(names(df2), 2))
expand.grid(rep(list(names(df2)), 2))
rep(names(df), 2)
install.packages('combinat')
library(combinat)
combn(3,2)
repnames <- rep(names(df2), 2)
repnames
combn(repnames, 2)
combn(names(df2), 2)
?combn
?permn
permn(names(df2), 2)
permn(names(df2))
permn(rep(names(df2), 2))
namies <- character()
?paste
namies <- names(df2)
for (i in 1:ncol(df2)) {
iname <- names(df2)[i]
for (j in i:ncol(df2)) {
jname <- names(df2)[j]
both <- paste(iname, jname, sep="")
namies <- c(namies, both)
}
}
namies
df2[['x']]
perceptron <- function(x, y, threshold = 0.99, verbose = FALSE, quadratic=FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
if (quadratic) {
for (i in 1:ncol(x2)) {
iname <- names(x2)[i]
for (j in i:ncol(x2)) {
jname <- names(x2)[j]
bothnames <- paste(iname, jname, sep="")
x2[[bothnames]] <- x2[[iname]] * x2[[jname]]
}
}
}
x2$intercept <- 1
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
pq <- perceptron(df2, label, quadratic=TRUE)
perceptron <- function(x, y, threshold = 0.99, verbose = FALSE, quadratic=FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
if (quadratic) {
for (i in 1:ncol(x2)) {
iname <- names(x2)[i]
for (j in i:ncol(x2)) {
jname <- names(x2)[j]
bothnames <- paste(iname, jname, sep="")
x2[[bothnames]] <- x2[[iname]] * x2[[jname]]
}
}
}
x2$intercept <- 1
print(names(x2))
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
pq <- perceptron(df2, label, quadratic=TRUE)
perceptron <- function(x, y, threshold = 0.99, verbose = FALSE, quadratic=FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
if (quadratic) {
for (i in 1:ncol(x)) {
iname <- names(x)[i]
for (j in i:ncol(x)) {
jname <- names(x)[j]
bothnames <- paste(iname, jname, sep="")
x2[[bothnames]] <- x[[iname]] * x[[jname]]
}
}
}
x2$intercept <- 1
print(names(x2))
coefs <- sapply(x2, function(df) 0)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
pq <- perceptron(df2, label, quadratic=TRUE)
perceptron <- function(x, y, threshold = 0.99, verbose = FALSE, quadratic=FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
if (quadratic) {
for (i in 1:ncol(x)) {
iname <- names(x)[i]
for (j in i:ncol(x)) {
jname <- names(x)[j]
bothnames <- paste(iname, jname, sep="")
x2[[bothnames]] <- x[[iname]] * x[[jname]]
}
}
}
x2$intercept <- 1
print(names(x2))
coefs <- sapply(x2, function(df) 0)
print(coefs)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
pq <- perceptron(df2, label, quadratic=TRUE)
pq$coefs
perceptron <- function(x, y, rate = 0.1, threshold = 0.99, verbose = FALSE, quadratic=FALSE) {
label <- as.factor(y)
positive <- levels(label)[2]
negative <- levels(label)[1]
x2 <- x
if (quadratic) {
for (i in 1:ncol(x)) {
iname <- names(x)[i]
for (j in i:ncol(x)) {
jname <- names(x)[j]
bothnames <- paste(iname, jname, sep="")
x2[[bothnames]] <- x[[iname]] * x[[jname]]
}
}
}
x2$intercept <- 1
print(names(x2))
coefs <- sapply(x2, function(df) 0)
print(coefs)
accuracy <- 0.0
iterations <- 0
while (accuracy < threshold) {
iterations <- iterations + 1
mistakes <- 0
for (i in 1:nrow(x2)){
if (verbose) print(coefs)
if (sum(coefs * x2[i,]) > 0) {
this <- positive
if (this != label[i]) {
coefs = coefs - rate * x2[i,]
mistakes <- mistakes + 1
}
} else {
this <- negative
if (this != label[i]) {
coefs = coefs + rate * x2[i,]
mistakes <- mistakes + 1
}
}
}
accuracy <- 1.0 - mistakes / nrow(x2)
if (verbose) print(accuracy)
}
list(coefs = coefs, accuracy = accuracy, iterations = iterations)
}
p3 <- perceptron(df2, label)
p3
p2
p4 <- perceptron(df2, label, rate=0.01)
p4
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
?mkdir
?dir.create
getwd()
setwd('Desktop/projects')
dir.create('slidify')
setwd('slidify')
dir.create('testproject')
setwd('testproject')
author('test_project')
getwd()
slidify('index.Rmd')
browseURL('index.html')
list.files()
slidify('index.Rmd')
?install_version
install_version('stringr', version = '0.6.2')
slidify('index.Rmd')
library(stringr)
